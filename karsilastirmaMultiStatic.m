%%% AnÄ±l ARSLAN 2303980
clc; clear; % close all;
addpath(genpath([pwd '/library']));

d = 1e3;
posMonostatic = [0; 0; 0];
% posMultistatic = [posMonostatic, [0 -2*d 2*d; 0 d d; 0 0 0]];
posMultistatic = [[-2*d -d; 0 0; 0 0], posMonostatic, [d 2*d; 0 0; 0 0]];
% posMultistatic = [[-d -0.7*d; sqrt(3)*d 0.7*d; 0 0], posMonostatic, [0.7*d d; 0.7*d sqrt(3)*d; 0 0]];

arrayRX = planarArray( ...
    "numberOfElements", [11 1], ...
    "numberOfElements", [1 1], ...
    "rpm", 0);
arrayTX = planarArray( ...
    "numberOfElements", [5 1], ...
    "numberOfElements", [1 1], ...
    "rpm", 0);

receivers = receivingNode( ...
    'position', posMultistatic, ...
    'position', posMultistatic, ...
    'array', arrayRX, ...
    'samplingFrequency', 2e6, ... 5e6, ... 2e7
    'CPIsecond', 15e-6); % 15e-6
% receivers.settingsreceiver("beamformingMode", "bypass");
% receivers.setbeamcenters("beamCentersAzimuth", -5 : 5 : 5);

transmitters = transmittingNode( ...
    'position', posMultistatic, ...
    'array', arrayTX, ...
    'inputPower_W', 1e3, ...
    'carrierFrequency', 1e9, ...
    'pulseWidth', 5e-7); % 1e-6
transmitters.setLFM( ...
    "bandWidth", 1e6, ... 5e6
    "frequencyDirection", "decreasing");

transmitterArrays = [transmitters.array];
receiverArrays = [receivers.array];

% transmitterArrays.setorientation( ...
%     "yaw", [45 135 90 0 180], ...
%     "scanDirection", ["ccw" "cw" "cw" "cw" "cw"]);
% receiverArrays.setorientation( ...
%     "yaw", [45 135 90 0 180], ...
%     "scanDirection", ["ccw" "cw" "cw" "cw" "cw"]);

transmitterArrays.setorientation("yaw", 90);
receiverArrays.setorientation("yaw", 90);
receiverArrays.setorientation( ...
    "yaw", [30 45 90 135 150]);
receiverArrays.setscanparameters("backOfArrayRegion", 90);
transmitterArrays.setscanparameters("backOfArrayRegion", 180);

network = radarNetwork( ...
    'receivingNodes', receivers, ...
    'transmittingNodes', transmitters);
network.settingsnetwork( ...
    "networkMode", "multiStatic", ...
    'fractionalDelayMode', 'off', ...
    'fractionalDelayMode', 'sinc-based', ...
    "beamTime", 1e-2);
network.activitycontrol( ...
    "transmittingNodeActivity", [0 0 1 0 0], ...
    "receivingNodeActivity", [1 1 1 1 1]);
network.setsurveillance("staticBeam");
network.setsynchronization( ...
    "timeOffsetBistaticPairs", 0, ...
    "timeDeviationBistaticPairs", 5e-8, ... Ts/10
    "timeDeviationBistaticPairs", 5e-7, ... Ts
    "frequencyOffsetBistaticPairs", 0, ...
    "frequencyDeviationBistaticPairs", 0 ... 5e8
    );
% network.visualizenetwork; view(0, 90);

targets = target( ...
    ...'position', [-d/2 0 d/2 -d; d/2 d 3*d/2 d; 0 0 0 0].*(.9 + 0.2*rand(3, 4)), ...
    ...'position', [-d/2 0 d/2; d/2 d 3*d/2; 0 0 0], ...
    ...'position', [-d/2 -d d/2; d/2 d 3*d/2; 0 0 0], ...
    'position', [-d/2 d/2; d/2 3*d/2; 0 0], ...
    ...'position', [d/2; 3*d/2; 0], ...
    ...'position', [d/2; d/2; 0], ...
    ...'position', [0; 1; 0], ... straddle loss
    ...'position', [-150; 550; 0], ... straddle loss
    'position', [0; 600; 0], ... on cell w/out straddle
    'meanRCS_dbsm', 0, ...
    'velocity', [0; -0*d/2; 0]);
int = interface( ...
    'network', network, ...
    'targets', targets);
int.configure( ...
    'noise', 1, ...
    'directPath', 0, ...
    "pathLoss", 1, ...
    "timeSynchronization", 1, ...
    "frequencySynchronization", 1, ...
    'spatialCoherency', 'incoherent', ...
    'swerling', 1);

sp = spu( ...
    "interfaces", int, ...
    "gridResolution", [100 100 6000]);
sp.setintegrationindices;
sp.configure( ...
    "PFA", 1e-6, ...
    "processingAlgorithm", 6, ...
    "detectionAlgorithm", "thresholding", ...
    "detectionAlgorithm", "peak", ...
    "detectionAlgorithm", "OMPjoint", ... 
    "numberOfTargets", nan, ...
    "neighbourOffset", 1, ...
    "seed", 0, ...
    "seedShuffle", 0, ...
    "numberOfTrials", 100, ...
    'numberOfTrialsParallel', 1, ...
    'numberOfTrialsParallel', 100);

int.visualizeellipses("ellipseType", "target");
int.visualizeellipses("ellipseType", "resolution");

%%
% arrayRX.visualizearray;
% arrayTX.visualizearray;
% network.visualizenetwork;
% int.visualizescenario("showPattern", 1);
% int.visualizereceivedsignals;
% int.visualizebeamformedsignals;
% sp.visualizefilteredsignals("trialID", 1);

trialID = 38;
figID = 50;
sp.configure( ...
    "seed", 0, ...
    "neighbourOffset", 1);
sp.applycompression( ...
    "saveResiduals", 1);
sp.visualizeintegratedsignals( ...
    "figureID", figID + 2, ...
    "iterationID", 1 : 10, ...
    "trialID", trialID, ...
    "plotMode", "image");
sp.visualizecompression( ...
    "figureID", figID + 100, ...
    "trialID", trialID);
%%
% sp.setmatchfilteredsignals;
% sp.visualizeintegratedsignals( ...
%     "figureID", 5140, ...,
%     "trialID", 1);
% sp.visualizeestimation;

%% resolution simulation

targets = target( ...
    'position', [-120; 50; 0], ... straddle loss
    ...'position', [0; 1; 0], ... straddle loss
    ...'position', [-150; 550; 0], ... straddle loss
    ...'position', [500; 500; 0], ... on cell w/out straddle
    'position', [0; 600; 0], ... on cell w/out straddle
    ...'position', [-250; 750; 0], ... straddle loss
    'meanRCS_dbsm', -4, ...
    'meanRCS_dbsm', 0, ...
    'meanRCS_dbsm', -4 ...
    );
    %%% sampling straddle loss is not known
int.settargets(targets)
clc;
sp.configure( ...
    "seed", 0, ...
    'prePFA', 1, ...
    'prePFA', 0.1, ...
    'numberOfNodesAdaptive', 1, ... true/false
    'nullPreDetectionNodes', 1, ... true/false
    "numberOfTrials", 1, ...
    "numberOfTrialsParallel", 1000 ...
    );
sp.simulatedetection( ...
    "onCellCenters", 1);
% close all;
sp.visualizeresolutionsimulation;

figure(1);
ylim([-0.1, 1]);
xlim([-2.1, 2.1]);
figure(2);
ylim([-0.1, 1]);
xlim([-2.1, 2.1]);
figure(3);
ylim([-0.1, 1]);
xlim([-2.1, 2.1]);


thDiffdB = 10*log10(gammaincinv(sp.configuration.PFA, network.numberOfActiveBistaticPairs, 'upper')/gammaincinv(sp.configuration.prePFA, network.numberOfActiveBistaticPairs, 'upper'));
cohGain = 10*log10(network.numberOfActiveBistaticPairs);
% non coh daha dusuk

% node sayisi non coherent integration sonrasi kullanilacak thresholdu
% yukseltmekte
% pre detection sirasinda 5 nodedan 2 tanesinde detection cikmaz ise
% threshold degeri gammaincinv(PFA, 5, 'upper') yerine
% gammaincinv(PFA, 3, 'upper') olarak hesaplanabilir
% 10*log10(gammaincinv(1e-6, 5, 'upper')) = 13.698
% 10*log10(gammaincinv(1e-6, 3, 'upper')) = 12.817
% 0.88104 dB fark olusmakta

%%%%%% Kritik
% numberOfNodesAdaptive yapildiginda 3 node da detection ciksada
% 5 nodedaki powerlar toplanmakta
% ilgisiz nodelari sifirlayip topla
% rapor yazalim
% farkli geometri
% straddle loss
% farkli hedef konumlari

SNR = mean(sp.outputSNR_lin);
PFA = 1e-6;
pd5 = sp.ROC(PFA, SNR, 5);
pd4 = sp.ROC(PFA, SNR, 4);
pd3 = sp.ROC(PFA, SNR, 3);
pd2 = sp.ROC(PFA, SNR, 2);
pd1 = sp.ROC(PFA, SNR, 1); % PFA.^(1./(1 + SNR))

N = 3;
T = sp.threshold(PFA, N);
% gammaincinv(PFA, N, 'upper')
% for N = 1
% -ln(PFA)
extraTerm = sum((T./(1 + SNR/N)).^(shiftdim(0 : N - 1, -3))./factorial(shiftdim(0 : N - 1, -3)), 5);
% sigma (T/(1 + SNR/N)^k/)k!
% extraTerm is correct for same SNR at all nodes
pd1_ = exp(-T./(1 + SNR/N)).*extraTerm;
% e^(-T/(1 + SNR/N))* sigma (T/(1 + SNR/N)^k/)k!
% for N = 1
% e^(-T/(1 + SNR/N)) = PFA^(1/(1 + SNR))

%% coverage simulation

clc;
sp.configure( ...
    "seed", 0, ...
    "neighbourOffset", 100, ...
    "numberOfTrials", 1, ...
    "numberOfTrialsParallel", 200);
sp.simulatecoverage( ...
    "meanRCS_dbsm", 10, ...
    "onCellCenters", 0);
close all;
sp.visualizecoveragesimulation( ...
    "contourLevelDetection", 0.85, ...
    "saveDirectory", "figures/multiStatic/centerOfCell/senkron", ...
    "saveDirectory", "figures/multiStatic/centerOfCell/asenkron", ...
    "saveDirectory", "figures/multiStatic/randomInCell/senkronFarkliKonfigurasyon", ...
    ..."saveDirectory", "figures/multiStatic/randomInCell/asenkron", ...
    "saveFigures", 1 ...
    );
%%
% sp.visualizereceiveroperatingcharacteristics;
% sp.visualizedetectioncharacteristics("PFA", 1e-4);
%%
% tic;
% detection = sp.startsimulation("duration", 0.5);
% toc
%%
% sp.configure("processingAlgorithm", 2);
% sp.visualizedetectioncharacteristics("PFA", 1e-6);
% sp.configure("processingAlgorithm", 6);
% sp.visualizedetectioncharacteristics("PFA", 1e-6);