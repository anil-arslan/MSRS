%%% AnÄ±l ARSLAN 2303980
clc; clear; % close all;
addpath(genpath([pwd '/library']));

arrayRX = planarArray( ...
    "numberOfElements", [11 1], ...
    "numberOfElements", [1 1], ...
    "rpm", 0);
arrayTX = planarArray( ...
    "numberOfElements", [5 1], ...
    "numberOfElements", [1 1], ...
    "rpm", 0);
d = 1e3;
posMonostatic = [0; 0; 0];
receivers = receivingNode( ...
    'position', [posMonostatic, [0 -2*d 2*d; 0 d d; 0 0 0]], ...
    'position', [posMonostatic, [-d d -2*d 2*d; 0 0 0 0; 0 0 0 0]], ...
    'array', arrayRX, ...
    'samplingFrequency', 2e6, ... 5e6, ... 2e7
    'CPIsecond', 15e-6); % 15e-6
% receivers.setbeamcenters("beamCentersAzimuth", -5 : 5 : 5);

transmitters = transmittingNode( ...
    'position', posMonostatic, ...
    'array', arrayTX, ...
    'inputPower_W', 1e3, ...
    'carrierFrequency', 1e9, ...
    'pulseWidth', 5e-7); % 1e-6
transmitters.setLFM( ...
    "bandWidth", 1e6, ... 5e6
    "frequencyDirection", "decreasing");

% receivers(1).array.setorientation("yaw", 45, "scanDirection", "ccw");
% transmitters(1).array.setorientation("yaw", 45, "scanDirection", "ccw");
% receivers(2).array.setorientation("yaw", 135, "scanDirection", "cw");
% transmitters(2).array.setorientation("yaw", 135, "scanDirection", "cw");
% receivers(3).array.setorientation("yaw", 90, "scanDirection", "cw");
% receivers(4).array.setorientation("yaw", 0, "scanDirection", "cw");
% receivers(5).array.setorientation("yaw", 180, "scanDirection", "cw");

receivers(1).array.setorientation("yaw", 90);
transmitters(1).array.setorientation("yaw", 90);
receivers(2).array.setorientation("yaw", 90);
transmitters(2).array.setorientation("yaw", 90);
receivers(3).array.setorientation("yaw", 90);
receivers(4).array.setorientation("yaw", 90);
receivers(5).array.setorientation("yaw", 90);

network = radarNetwork( ...
    'receivingNodes', receivers, ...
    'transmittingNodes', transmitters);
network.settingsnetwork( ...
    "networkMode", "multiStatic", ...
    "beamTime", 1e-2);
network.activitycontrol("transmittingNodeActivity", 1, "receivingNodeActivity", [1 1 1 1 1]);
network.setsurveillance("staticBeam");

targets = target( ...
    ...'position', [-d/2 0 d/2 -d; d/2 d 3*d/2 d; 0 0 0 0].*(.9 + 0.2*rand(3, 4)), ...
    ...'position', [-d/2 0 d/2; d/2 d 3*d/2; 0 0 0], ...
    ...'position', [-d/2 -d d/2; d/2 d 3*d/2; 0 0 0], ...
    ...'position', [-d/2 d/2; d/2 3*d/2; 0 0], ...
    ...'position', [d/2; 3*d/2; 0], ...
    'position', [d/2; d/2; 0], ...
    'meanRCS_dbms', 20, ...
    'velocity', [0; -0*d/2; 0]);
int = interface( ...
    'network', network, ...
    'targets', targets);
int.configure( ...
    'noise', 1, ...
    'directPath', 0, ...
    "pathLoss", 1, ...
    'spatialCoherency', 'incoherent');

sp = spu("interfaces", int, "gridResolution", [100 100 6000]);
sp.setintegrationindices;
sp.configure( ...
    "PFA", 1e-6, ... 1e-6
    "processingAlgorithm", 6, ...
    "detectionAlgorithm", "thresholding", ...
    "detectionAlgorithm", "peak", ...
    "detectionAlgorithm", "NCOMP", ... 
    "numberOfTargets", nan, ...
    "seed", 0, ...
    "seedShuffle", 0, ...
    "numberOfTrials", 1, ...
    'numberOfTrialsParallel', 100, ...
    ...'numberOfTrialsParallel', 1, ...
    'groupingCloseness', 3, ...
    'CFAR', 1, ...
    'numberOfGuardCells', 1, ...
    'numberOfTrainingCells', 20, ...
    'interpolationMF', 0, ...
    'interpolationDF', 1, ...
    'removeBoundaryDetectionDF', 1, ...
    'removeBoundaryDetectionMF', 1);

%%
% arrayRX.visualizearray;
% arrayTX.visualizearray;
% network.visualizenetwork;
% int.visualizescenario("showPattern", 1);
% int.visualizereceivedsignals;
% int.visualizebeamformedsignals;
% sp.visualizefilteredsignals("trialID", 1);
%%
% threshold hesapla, complex genligi dogru hesapla
% monostatik compressive sensing debug
% rastgele hedeflerle monte carlo simulasyonu alt yapisi hazirla
% multi TX?
% BP, lsqr lasso, group lasso, fused lasso, adaptive lasso, prior lasso
% stagewise OMP, generalized OMP, multipath matching pursuit, elastic net
% integrated signali pattern ile carp
% integration weights kodunu duzenle (L6 icin onemsiz)

% ghost target, mainlobe, tapering fine sampling etc.

figID = 50;
sp.applycompression( ...
    "saveResiduals", 1);
% sp.visualizeintegratedsignals( ...
%     "figureID", figID + 1, ...
%     "trialID", 1, ...
%     "monoStaticNetworkRXID", 1, ...
%     "monoStaticNetworkCHID", 1, ...
%     "plotMode", "image");
sp.visualizeintegratedsignals( ...
    "figureID", figID + 2, ...,
    "iterationID", 1 : 2, ...
    "trialID", 1, ...
    "monoStaticNetworkRXID", 1, ...
    "monoStaticNetworkCHID", 1, ...
    "plotMode", "image");
sp.visualizeintegratedsignals( ...
    "trialID", 1, ...
    "monoStaticNetworkRXID", 2, ...
    "monoStaticNetworkCHID", 1);
sp.visualizecompression( ...
    "figureID", figID + 100, ...
    "trialID", 1, ...
    "monoStaticNetworkRXID", 1, ...
    "monoStaticNetworkCHID", 1);
% sp.visualizeestimation;
%%
% [PD, PFA] = sp.simulatedetection;
sp.configure( ...
    "seed", 0, ...
    "numberOfTrials", 1, ...
    "numberOfTrialsParallel", 100);
sp.simulatecoverage( ...
    "meanRCS_dbms", 0, ...
    "onCellCenters", 0);
sp.visualizecoveragesimulation;
%%
% sp.visualizereceiveroperatingcharacteristics;
% sp.visualizedetectioncharacteristics("PFA", 1e-4);
%%
% tic;
% detection = sp.startsimulation("duration", 0.5);
% toc