%%% AnÄ±l ARSLAN
% 2303980

% phase asynchronous widely seperated receivers | spatially i.i.d circularly symmetric complex gaussian signal model
    %%% LRT
        % SLC: Square Law Combining (LRT under equal SNR)                               Implemented
        % WSLC: Weighted Sqaure Law Combining (LRT under different SNR)                 Implemented

    %%% Binary
        % BC: Binary Combining (LRT under equal SNR)                                    Implemented
        % CVBC: Chair-Varshney Binary Combining (LRT under different SNR)               Implemented
    
    %%% Other
        % LLC: Linear Law Combining
        % NSLC: Normalized Square Law Combining                                         Implemented
        % SC: Selective Combining (Partial Selective Combining K = 1)                   Implemented
        % PSC: Partial Selective Combining (Combine largest K samples)                  *Unsuccesful: successful for K = 1 (SC), 2 and M (SLC)

% phase synchronous closely spaced receivers | spatially fully correlated circularly symmetric complex gaussian signal model
    %%% LRT
        % EGC: Equal Gain Combining (LRT under equal SNR)                               Implemented for localPFA = 1
        % MF: Matched Filter (LRT under different SNR)                                  Implemented for localPFA = 1


% clc;
% clear;
% close all;
addpath(genpath([pwd '/library']));
addpath(genpath([pwd '/simCDF']));

dtc = detector( ...
    ..."globalPFA", logspace(-1, -4, 201), ...
    "globalPFA", 1e-6, ...
    "numberOfSensors", [3 5 7 9 11], ...
    "numberOfSensors", 9 , ...
    "numberOfSensors", 4 , ...
    "SNR_input_dB", [60 zeros(1, 8)].', ...
    "SNR_input_dB", 8, ...
    ..."SNR_input_dB", 10, ...
    ..."SNR_input_dB", linspace(0, 20, 10), ...
    ..."localPFA", [logspace(0, -8, 9), 0.5] ...
    ..."localPFA", logspace(-1, -8, 8) ...
    "localPFA", logspace(0, -8, 101) ...
    ..."localPFA", 1 ...
    ..."localPFA", .1 ...
    );
dtc.setalgorithm( ...
    "binaryDetectionRule", "notSpecified", ...
    ..."binaryDetectionRule", "userDefined", ...
    ..."numberOfRequiredDetections", 2, ...
    "binaryDetectionConstraint", "fixedGlobalPFA", ...
    "binaryDetectionConstraint", "fixedGlobal|LocalPFA", ...
    ..."binaryDetectionConstraint", "timeSharing", ...
    "signalAmplitudeModel", "correlatedExponential", ...
    "signalAmplitudeModel", "decorrelatedExponential", ...
    "signalPhaseModel", "correlatedUniform", ...
    "signalPhaseModel", "decorrelatedUniform", ...
    "globalFusionRule", "CVBC" ...
    );
% rng(1975); dtc.randomSNRwithFixedAverage("rangeSNR_dB", 20);
rng(1975); dtc.randomSNRwithFixedAverage;
% detector.randomLocalPFAwithFixedAverage("averageLocalPFA", 0.01);
% detector.setbudgetconstraint("constraint", ["dataRate", "transmittedPower"]);
% detector.setbudgetconstraint("constraint", "dataRate");
dtc.visualize( ...
    "x_axis", ["numberOfSensors", "SNR"], ...
    "x_axis", "localPFA", ...
    ..."x_axis", "globalPFA", ...
    "y_axis", "globalPD", "dataType", "analytical");
% dtc.visualize( ...
%     "x_axis", ["numberOfSensors", "SNR"], ...
%     "x_axis", "localPFA", ...
%     ..."x_axis", "globalPFA", ...
%     ..."x_axis", ["localPFA", "globalThreshold"], ...
%     "y_axis", "globalPFA", "dataType", "analytical");



%% PD simulator
% dtc.setmontecarlo("numberOfTrials", 1e6); % 1e6 yi gecme
% dtc.simulate("printStatus", 1, "simulationData", "globalThreshold", "statistics", 1);

dtc.setmontecarlo("numberOfTrials", 1e5); % 1e6 yi gecme
dtc.simulate("printStatus", 1, "simulationData", "globalPD", "statistics", 1);
dtc.visualize( ...
    "x_axis", ["globalPFA", "localPFA"], ...
    "y_axis", "globalPD", "dataType", ["analytical", "empirical"]);


% dtc.setmontecarlo("numberOfTrials", 1e7); % 1e6 yi gecme
% dtc.simulate("printStatus", 1, "simulationData", "globalPFA", "statistics", 1);
% dtc.visualize( ...
%     "x_axis", ["globalPFA", "localPFA"], ...
%     "y_axis", "globalPFA", "dataType", ["analytical", "empirical"]);
% detector.visualize( ...
%     "x_axis", ["localPFA", "localThreshold", "localPD"], ...
%     "y_axis", "globalPD", "dataType", ["analytical", "empirical"]);
% detector.visualize( ...
%     "x_axis", ["globalPFA", "numberOfSensors", "SNR", "localPFA"], ...
%     "y_axis", "globalThreshold", "dataType", ["analytical", "empirical"]);

% detector.visualize( ...
%     "x_axis", ["globalPFA", "numberOfSensors", "SNR", "globalThreshold", "localPFA", "localThreshold", "localPD"], ...
%     "y_axis", "numberOfActiveSensorsExpectationUnderSignal", "dataType", ["analytical", "empirical"]);
% detector.visualize( ...
%     "x_axis", ["globalPFA", "numberOfSensors", "SNR", "globalThreshold", "localPFA", "localThreshold", "localPD"], ...
%     "y_axis", "numberOfActiveSensorsStandardDeviationUnderSignal", "dataType", ["analytical", "empirical"]);


%% High Monte Carlo PFA simulator
clc;
clear;

dtc = detector( ...
    "globalPFA", 1e-5, ...
    "numberOfSensors", [1 2 3 5 7 9 11], ...
    "SNR_input_dB", 8, ...
    ..."SNR_input_dB", flipud(linspace(14, 0, 10).'), ... % meaningful for SNR dependent weighted fusion rules e.g. WSLC
    ..."localPFA", 1 ...
    "localPFA", logspace(0, -5, 6) ...
    ..."localPFA", logspace(0, -2, 9) ...
    );
% detector.setconstraint;
dtc.setmontecarlo("numberOfTrials", 2e7);
dtc.setalgorithm( ...
    "binaryDetectionRule", "notSpecified", ...
    ..."binaryDetectionRule", "userDefined", ...
    ..."numberOfRequiredDetections", 2, ...
    "binaryDetectionConstraint", "fixedGlobalPFA", ...
    "binaryDetectionConstraint", "fixedGlobal|LocalPFA", ...
    "signalAmplitudeModel", "deterministic", ...
    "globalFusionRule", "SLC" ...
    );
dtc.simulate("printStatus", 1, "simulationData", "globalPFA", "statistics", 1);

% Visualization
% close all;
dtc.visualize( ...
    "x_axis", "numberOfSensors", ...
    "y_axis", "globalPFA", "dataType", ["analytical", "empirical"]);
dtc.visualize( ...
    "x_axis", ["numberOfSensors", "globalThreshold"], ...
    "y_axis", "globalThreshold", "dataType", ["analytical", "empirical"]);
% detector.visualize( ...
%     "x_axis", ["globalPFA", "numberOfSensors", "SNR", "globalThreshold", "localPFA", "localThreshold", "localPD"], ...
%     "y_axis", "globalPFA", "dataType", ["analytical", "empirical"]);



% detector.visualize( ...
%     "x_axis", ["globalPFA", "numberOfSensors", "SNR", "globalThreshold", "localPFA", "localThreshold", "localPD"], ...
%     "y_axis", "numberOfActiveSensorsExpectationUnderNoise", "dataType", ["analytical", "empirical"]);
% detector.visualize( ...
%     "x_axis", ["globalPFA", "numberOfSensors", "SNR", "globalThreshold", "localPFA", "localThreshold", "localPD"], ...
%     "y_axis", "numberOfActiveSensorsStandardDeviationUnderNoise", "dataType", ["analytical", "empirical"]);

%%% DONE
    % is SLC optimum?
    % optimum rule under local thresholding? GLRT LRT
    % binary integration exact global PFA using local PFA
    % binary integration exact local PFA using global PFA
    % mean and std of #active sensors
    % different local PFA case | censoring
    % random SNR, random local PFA
    % i.i.d yapma (comparison with spatial models like swerling 0 & 1 to see the advantage of spatial diversity)
    % binary fusion fixed global & local PFA:
    % with threshold "T - 1" w/p "q" and "T" w/p "1 - q" q : randomization probability