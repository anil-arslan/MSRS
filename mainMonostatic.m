%%% AnÄ±l ARSLAN 2303980
clc; %clear; close all;
addpath(genpath([pwd '/library']));
set(groot, "defaultFigurePosition", [680 458 560 420]);

d = 1e3;

receivers = receivingNode( ...
    'samplingFrequency', 2e7, ...
    'CPIsecond', 10e-6);
transmitters = transmittingNode( ...
    'inputPower_W', 1e3, ...
    'carrierFrequency', 1e9, ...
    'pulseWidth', 1e-6);
transmitters.setLFM( ...
    "bandWidth", 5e6, ...
    "frequencyDirection", "decreasing");
% transmitters.visualizewaveform("domain", "frequency");
transmitters.settaper("taperTypeFastTime", "rectwin");
network = radarNetwork( ...
    'receivingNodes', receivers, ...
    'transmittingNodes', transmitters);
receivers.array.setscanparameters("backOfArray", 1);
receivers.array.setscanparameters("backOfArray", 1);
% network.visualizenetwork;
% network.visualizewaveformsampled("axisAmbiguity", "3D");
targets = target( ...
    'position', [-318.96229; -310.96229; 0], ...
    'meanRCS_dbsm', -10);
% targets = target( ...
%     'position', [d/4; -d/8; d/4], ...
%     'meanRCS_dbsm', 1e3);
% targets.visualizetargets;
int = interface( ...
    'network', network, ...
    'targets', targets);
int.configure( ...
    'noise', 1, ...
    'spatialCoherency', 'noncoherent');
sp = spu( ...
    "interface", int, ...
    "gridResolution", [20 22 6000]);
sp.setintegrationindices;
sp.configure( ...
    "globalPFA", 1e-3, ...
    "globalFusionRule", "SLC", ...
    "detectionAlgorithm", "OMPjoint", ...
    "seedShuffle", 1, ...
    "numberOfTrials", 200, ...
    'numberOfTrialsParallel', 200);
sp.visualizehypothesizedvariables("variable", "indices");

%%
% int.visualizescenario;
int.visualizereceivedsignals;
sp.visualizefilteredsignals;
% sp.visualizehypothesizedvariables("variable", "time", "dimension", "x-y-z");
%%
sp.applycompression("saveResiduals", 1);
sp.visualizeintegratedsignals;
%%
sp.simulatedetection;