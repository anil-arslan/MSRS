%%% AnÄ±l ARSLAN 2303980
clc; clear; % close all;
addpath(genpath([pwd '/library']));
set(groot, "defaultFigurePosition", [680 458 560 420]);

d = 1e3;

arrayRX = planarArray( ...
    "numberOfElements", [1 1], ...
    "rpm", 0);
arrayTX = planarArray( ...
    "numberOfElements", [1 1], ...
    "rpm", 0);

receivers = receivingNode( ...
    'position', [[-2*d -d; 0 0; 0 0], [0; 0; 0], [d 2*d; 0 0; 0 0]], ...
    'array', arrayRX, ...
    'samplingFrequency', 2e6, ... 5e6, ... 2e7
    'CPIsecond', 15e-6);

transmitters = transmittingNode( ...
    'position', [0; 0; 0], ...
    'array', arrayTX, ...
    'inputPower_W', 1e3, ...
    'carrierFrequency', 1e9, ...
    'pulseWidth', 5e-7); % 1e-6
transmitters.setLFM( ...
    "bandWidth", 1e6, ... 5e6
    "frequencyDirection", "decreasing");

receiverArrays = [receivers.array];
% receiverArrays.setorientation("yaw", [30 45 90 135 150]);
% receiverArrays.setscanparameters("backOfArrayRegion", 90);
% transmitters.array.setorientation("yaw", 90);
% transmitters.array.setscanparameters("backOfArrayRegion", 240);

receiverArrays.setorientation("yaw", 90);
receiverArrays.setscanparameters("backOfArrayRegion", 150);
transmitters.array.setorientation("yaw", 90);
transmitters.array.setscanparameters("backOfArrayRegion", 210);

% receiverArrays.setscanparameters("backOfArray", true);
% transmitters.array.setscanparameters("backOfArray", true);

network = radarNetwork( ...
    'receivingNodes', receivers, ...
    'transmittingNodes', transmitters);
network.settingsnetwork( ...
    "networkMode", "multiStatic", ...
    'fractionalDelayMode', 'off' ...
    ...'fractionalDelayMode', 'sinc-based'
    );
network.activitycontrol( ...
    "transmittingNodeActivity", 1, ...
    "receivingNodeActivity", [1 1 1 1 1]);
network.setsurveillance("staticBeam");
network.setsynchronization( ...
    "timeOffsetBistaticPairs", 0, ...
    ..."timeDeviationBistaticPairs", 5e-8, ... Ts/10
    ..."timeDeviationBistaticPairs", 5e-7, ... Ts
    "frequencyOffsetBistaticPairs", 0, ...
    "frequencyDeviationBistaticPairs", 0 ... 5e8
    );

targets = target( ...
    ...'position', [-d/2 0 d/2 -d; d/2 d 3*d/2 d; 0 0 0 0].*(.9 + 0.2*rand(3, 4)), ...
    ...'position', [-d/2 0 d/2; d/2 d 3*d/2; 0 0 0], ...
    ...'position', [-d/2 -d d/2; d/2 d 3*d/2; 0 0 0], ...
    ...'position', [-d/2 d/2; d/2 3*d/2; 0 0], ...
    ...'position', [d/2; 3*d/2; 0], ...
    ...'position', [d/2; d/2; 0], ...
    ...'position', [0; 1; 0], ... straddle loss
    ...'position', [-150; 550; 0], ... straddle loss
    'position', [0; 600; 0], ... on cell w/out straddle
    'meanRCS_dbsm', 0);
int = interface( ...
    'network', network, ...
    'targets', targets);
int.configure( ...
    'noise', 1, ...
    'directPath', 0, ...
    "pathLoss", 1, ...
    "timeSynchronization", 1, ...
    "frequencySynchronization", 1, ...
    'spatialCoherency', 'noncoherent', ...
    ...'spatialCoherency', 'coherent', ...
    'swerling', 1);
% int.visualizescenario("showPattern", 1);

sp = spu( ...
    "interfaces", int, ...
    "gridResolution", [100 100 6000]);
sp.setintegrationindices;
sp.configure( ...
    "globalPFA", 1e-6, ...
    "globalFusionRule", "SLC", ...
    "localPFA", 1, ...
    "preDetectionAlgorithm", "thresholding", ... CACFAR
    "detectionAlgorithm", "OMPjoint", ... 
    "seed", 0, ...
    "seedShuffle", 0, ...
    "numberOfTrials", 100, ...
    'numberOfTrialsParallel', 100);

% figNetwork = network.visualizenetwork;
% int.visualizescenario("showPattern", 1);
% int.visualizeellipses("ellipseType", "target");
% figResolution = int.visualizeellipses("ellipseType", "resolution");

% int.visualizereceivedsignals("receivingNodeIDs", 1 : 5, "trialID", 1); % draws different trial all the time
% sp.visualizefilteredsignals("receivingNodeIDs", 1 : 5, "trialID", 1); % draws saved data

% coh sikinti gibi, duz integration da sikintili
% dictionary noncoh okey

%%
clc;
trialID = 6;
figID = 81;
sp.configure("seed", 0, "globalFusionRule", "SLC", "localPFA", 0.01);
% sp.configure("seed", 0, "globalFusionRule", "SLC", "localPFA", 1);
% sp.configure("seed", 0, "globalFusionRule", "EGC");
% sp.configure("seed", 0, "globalFusionRule", "MRC");
network.settingsnetwork( ...
    'fractionalDelayMode', 'off' ...
    ...'fractionalDelayMode', 'sinc-based'
    );
sp.applycompression( ...
    "saveResiduals", 1);
sp.visualizeintegratedsignals( ...
    "figureID", figID, ...
    "iterationID", 1 : 10, ...
    "iterationID", 1, ...
    "trialID", trialID, ...
    "plotMode", "image");
% sp.visualizecompression( ...
%     "figureID", figID + 100, ...
%     "trialID", trialID);
%%
sp.configure("seed", 0, "globalFusionRule", "SLC");
sp.setmatchfilteredsignals;
sp.setintegrationindices;
% sp.visualizefilteredsignals;
sp.visualizeintegratedsignals( ...
    "figureID", 5140, ...
    "trialID", 1);
sp.visualizeestimation;

%% resolution simulation

targets = target( ...
    'position', [-120; 50; 0], ... straddle loss
    ...'position', [0; 1; 0], ... straddle loss
    ...'position', [-150; 550; 0], ... straddle loss
    ...'position', [500; 500; 0], ... on cell w/out straddle
    'position', [0; 600; 0], ... on cell w/out straddle
    ...'position', [-250; 750; 0], ... straddle loss
    'meanRCS_dbsm', -4, ...
    'meanRCS_dbsm', 0 ...
    );
    %%% sampling straddle loss is not known
int.settargets(targets)
clc;
sp.configure( ...
    "seed", 0, ...
    'localPFA', 1, ... 0.1
    'decentralizedFusion', 0, ... true/false
    "numberOfTrials", 1, ...
    "numberOfTrialsParallel", 1000 ...
    );
sp.simulatedetection( ...
    "randomOnCell", 0, ...
    "numberOfTargets", 1);
% close all;
sp.visualizeresolutionsimulation;

%% coverage simulation

clc;
sp.configure( ...
    "seed", 0, ...
    "numberOfTrials", 1, ...
    "numberOfTrialsParallel", 10);

network.settingsnetwork( ...
    'fractionalDelayMode', 'off' ...
    ...'fractionalDelayMode', 'sinc-based' ...
    );
sp.simulatecoverage( ...
    "neighbourOffset", 100, ...
    "meanRCS_dbsm", 10, ...
    "onCellCenters", 1);
close all;
sp.visualizecoveragesimulation( ...
    "contourLevelDetection", 0.85, ...
    "saveFigure", 0);