%%% AnÄ±l ARSLAN 2303980
% clc; clear; % close all;
addpath(genpath([pwd '/library']));
set(groot, "defaultFigurePosition", [680 458 560 420]);

d = 10e3;

arrayRX = uniformPlanarArray( ...
    "numberOfElements", [1 1], ...
    "rpm", 0);
arrayTX = uniformPlanarArray( ...
    "numberOfElements", [1 256], ...
    "rpm", 0);

% M = 9;
% theta = [-90 -67.5 -45 -22.5 0 22.5 45 67.5 90] - 90;
% x = d.*cosd(theta);
% y = d.*sind(theta) + d;
% Rm = [x; y; zeros(1, M)];

Rm = [-2*d 1.5*d
    2.5*d 3*d + 0.25*d
    3*d 2*d
    0 4*d
    -d 4*d
    -2*d 3*d
    2*d 4*d];
Rm(:, 2) = Rm(:, 2) - 2*d;
M = size(Rm, 1);
Rm = [Rm'; zeros(1, M)];


receivers = receivingNode( ...
    'position', Rm, ...
    'samplingFrequency', 1e7, ...
    ...'samplingFrequency', 2e6, ...
    'samplingFrequency', 2e6, ...
    'CPIsecond', 15e-6, ...
    'CPIsecond', 0.2*1e-3, ...
    'array', arrayRX ...
    );

transmitters = transmittingNode( ...
    'position', [0; 2*d; 0], ...
    'array', arrayTX, ...
    'peakPower_W', 20e3, ...
    'pulseWidth', 10e-6, ...
    ...'pulseWidth', 5e-7, ...
    'carrierFrequency', 1e9);
transmitters.setLFM( ...
    "bandWidth", 1e6, ...
    "frequencyDirection", "decreasing");

receiverArrays = [receivers.array];
% receiverArrays.setorientation("yaw", [30 45 90 135 150]);
% receiverArrays.setscanparameters("backOfArrayRegion", 90);
% transmitters.array.setorientation("yaw", 90);
% transmitters.array.setscanparameters("backOfArrayRegion", 240);

receiverArrays.setorientation("yaw", [15 -150 165 -90 -75 -15 -105]);
receiverArrays.setscanparameters("backOfArrayRegion", 150);
transmitters.array.setorientation("yaw", -90);
transmitters.array.setscanparameters("backOfArrayRegion", 150);
transmitters.array.steer("steeringAzimuth", atand(5/25));
receiverArrays(4).steer("steeringAzimuth", atand(5/25));

% transmitters.array.steer("steeringAzimuth", atand(-14050/10100));
% receiverArrays(4).steer("steeringAzimuth", atand(-14050/10100));
% receiverArrays.setscanparameters("backOfArray", true);
% transmitters.array.setscanparameters("backOfArray", true);

network = radarNetwork( ...
    'receivingNodes', receivers, ...
    'transmittingNodes', transmitters);
network.settingsnetwork( "networkMode", "multiStatic");
% network.settingsnetwork( "networkMode", "monoStatic");
network.activitycontrol( ...
    "transmittingNodeActivity", 1, ...
    "receivingNodeActivity", ones(1, M));
network.setsurveillance("staticBeam");
network.setsynchronization( ...
    "timeOffsetBistaticPairs", 0, ...
    ..."timeDeviationBistaticPairs", 5e-8, ... Ts/10
    ..."timeDeviationBistaticPairs", 5e-7, ... Ts
    "frequencyOffsetBistaticPairs", 0, ...
    "frequencyDeviationBistaticPairs", 0 ... 5e8
    );

targets = target( ...
    'position', [d/2; -d/2 - 100; 0], ...
    'meanRCS_dbsm', 7);
int = interface( ...
    'network', network, ...
    'targets', targets);
fc = fusionCenter( ...
    "interfaces", int, ...
    "gridResolution", [150 150 inf]);

%%% Configuration %%%

int.configure( ...
    'noise', 1, ...
    'directPath', 0, ...
    "pathLoss", 1, ...
    'fractionalDelay', 'off', ...
    ...'fractionalDelay', 'sinc-based', ...
    "timeSynchronization", 1, ...
    "frequencySynchronization", 1, ...
    'spatialCoherency', 'noncoherent', ...
    ...'spatialCoherency', 'coherent', ...
    'swerling', 1);
fc.configure( ...
    "globalPFA", 1e-6, ...
    "globalIntegrationRule", "SLC", ...
    "localPFA", 1, ...
    "seed", 0, ...
    "seedShuffle", 0, ...
    "numberOfTrials", 1, ...
    'numberOfTrialsParallel', 1);

%% Dictionary
fc.setdictionary;

%% Visualization %%%
arrayTX.visualizearray;
transmitters.visualizewaveform;
network.visualizenetwork;
network.visualizewaveformsampled;
fig = int.visualizescenario("showPattern", 1, "figureID", 578);
figureName = 'scenario_1';
savefig(fig, ['C:\GitRepo\MSRS\figuresSim\' figureName '.fig']);
saveas(fig, ['C:\GitRepo\MSRS\figuresSim\' figureName '.eps'], 'epsc');
int.visualizeellipses("ellipseType", "target");
int.visualizeellipses("ellipseType", "resolution");
int.visualizereceivedsignals("receivingNodeIDs", 1, "trialID", 1); % draws different trial all the time
int.visualizebeamformedsignals("receivingNodeIDs", 1, "trialID", 1); % draws different trial all the time
fc.visualizehypothesizedvariables("receivingNodeID", 1, "variable", "averageSNR");

%% Single Target Simulation

% targets = target( ...
%     'position', [d/2; -d/2 - 100; 0], ... on cell center
%     ...'position', [d/2 + 75; -d/2 - 100; 0], ...
%     ...'position', [d/2 + 75; -d/2 - 25; 0], ...
%     ...'position', [950; 15000; 0], ... on cell center
%     ...'position', [950 d/2; 15000 -d/2 - 100; 0 0], ... on cell center
%     'meanRCS_dbsm', 7 ...
%     );
% % sampling straddle loss is not known
% int.settargets(targets)
fc.configure( ...
    "seed", 0, ...
    "globalIntegrationRule", "BC", ...
    "localPFA", 1e-3);
fc.applyspatialprocessing("saveSpectrum", 1, "doesPrint", true);

% Visualization %%%
trialID = 1; % coh kontrol edilmeli

fc.visualizefilteredsignals("receivingNodeIDs", 1, "trialID", trialID); % draws saved data
xlim([-9 inf]); ylim([-20 20*log10(10)]);
fc.visualizeestimation("trialID", trialID);
fig2 = fc.visualizeintegratedsignals( ...
    "trialID", trialID, ...
    "plotMode", "image");
ylim([-12 20]); xlim([-20 30]);
% figureName = 'scenario_1_response_localPFA';
% savefig(fig2, ['C:\GitRepo\MSRS\figuresSim\' figureName '.fig']);
% saveas(fig2, ['C:\GitRepo\MSRS\figuresSim\' figureName '.eps'], 'epsc');

%% Resolution simulation

% targets = target( ...
%     'position', [-120; 50; 0], ... straddle loss
%     'position', [0; 1; 0], ... straddle loss
%     'position', [-150; 550; 0], ... straddle loss
%     'position', [500; 500; 0], ... on cell w/out straddle
%     ...'position', [0; 600; 0], ... on cell w/out straddle
%     ...'position', [-250; 750; 0], ... straddle loss
%     'meanRCS_dbsm', -4, ...
%     'meanRCS_dbsm', 0 ...
%     );
    %%% sampling straddle loss is not known
% int.settargets(targets)
% clc;
fc.configure( ...
    "seed", 0, ...
    'localPFA', 1e-3, ... 0.1
    "numberOfTrials", 1, ...
    "numberOfTrialsParallel", 100 ...
    );
fc.simulatedetection( ...
    "randomOnCell", 1, ...
    "numberOfTargets", 1 ...
    );
% close all;
fc.visualizedetectionsimulation;

%% analytical coverage

clc;
fc.configure( ...
    "globalIntegrationRule", "BC", ...
    'localPFA', 1e-3);

fc.analyticalcoverage("meanRCS_dbsm", 7);
close all;
fc.visualizecoveragesimulation( ...
    "contourLevelDetection", 0.85, ...
    "saveFigure", 1, "header", 'scenario_1_BC');

%% simulated coverage

clc;
fc.configure( ...
    "seed", 0, ...
    'localPFA', 1e-3, ... 0.1
    "numberOfTrials", 1, ...
    "numberOfTrialsParallel", 1);

fc.simulatecoverage("meanRCS_dbsm", 7, "onCellCenters", 1, "neighbourOffset", 100);
close all;
fc.visualizecoveragesimulation( ...
    "contourLevelDetection", 0.85, ...
    "saveFigure", 0, "header", 'scenario_1');