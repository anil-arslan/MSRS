%%% AnÄ±l ARSLAN 2303980
clc; clear; % close all;
addpath(genpath([pwd '/library']));

NRX = 3 : 2 : 21;

numIter = length(NRX);

dataRate = zeros(1, numIter);
cost = zeros(1, numIter);
PD = zeros(1, numIter);
for iterID = 1 : numIter
    fprintf('Iteration: %d/%d\n', iterID, numIter);
    d = 1e3;
    Nrx = NRX(iterID);
    posMonostatic = [0; 0; 0];
    
    theta = 90*(1 : floor(Nrx/2))/floor(Nrx/2) + 90;
    posMultistatic = [[d*cosd(flip(theta)); d - d*sind(flip(theta)); zeros(1, floor(Nrx/2))], posMonostatic, [-d*cosd(theta); d - d*sind(theta); zeros(1, floor(Nrx/2))]];
    
    arrayRX = planarArray( ...
        "numberOfElements", [11 1], ...
        "numberOfElements", [1 1], ...
        "rpm", 0);
    arrayTX = planarArray( ...
        "numberOfElements", [5 1], ...
        "numberOfElements", [1 1], ...
        "rpm", 0);
    
    receivers = receivingNode( ...
        'position', posMultistatic, ...
        'position', posMultistatic, ...
        'array', arrayRX, ...
        'samplingFrequency', 2e6, ... 5e6, ... 2e7
        'CPIsecond', 15e-6); % 15e-6
    % receivers.settingsreceiver("beamformingMode", "bypass");
    % receivers.setbeamcenters("beamCentersAzimuth", -5 : 5 : 5);
    
    transmitters = transmittingNode( ...
        'position', posMonostatic, ...
        'array', arrayTX, ...
        'inputPower_W', 1e3, ...
        'carrierFrequency', 1e9, ...
        'pulseWidth', 5e-7); % 1e-6
    transmitters.setLFM( ...
        "bandWidth", 1e6, ... 5e6
        "frequencyDirection", "decreasing");
    
    transmitterArrays = [transmitters.array];
    receiverArrays = [receivers.array];
    
    % transmitterArrays.setorientation( ...
    %     "yaw", [45 135 90 0 180], ...
    %     "scanDirection", ["ccw" "cw" "cw" "cw" "cw"]);
    % receiverArrays.setorientation( ...
    %     "yaw", [45 135 90 0 180], ...
    %     "scanDirection", ["ccw" "cw" "cw" "cw" "cw"]);
    
    transmitterArrays.setorientation("yaw", 90);
    receiverArrays.setorientation("yaw", 90);
    receiverArrays.setorientation( ...
        "yaw", linspace(0, 180, Nrx));
    receiverArrays.setscanparameters("backOfArrayRegion", 90);
    transmitterArrays.setscanparameters("backOfArrayRegion", 180);
    
    network = radarNetwork( ...
        'receivingNodes', receivers, ...
        'transmittingNodes', transmitters);
    network.settingsnetwork( ...
        "networkMode", "multiStatic", ...
        'fractionalDelayMode', 'off', ...
        'fractionalDelayMode', 'sinc-based', ...
        "beamTime", 1e-2);
    network.activitycontrol( ...
        "transmittingNodeActivity", 1, ...
        "receivingNodeActivity", ones(1, Nrx));
    network.setsurveillance("staticBeam");
    network.setsynchronization( ...
        "timeOffsetBistaticPairs", 0, ...
        "timeDeviationBistaticPairs", 5e-8, ... Ts/10
        "timeDeviationBistaticPairs", 5e-7, ... Ts
        "frequencyOffsetBistaticPairs", 0, ...
        "frequencyDeviationBistaticPairs", 0 ... 5e8
        );
    
    % network.visualizenetwork; view(0, 90);
    % int.visualizeellipses("ellipseType", "target");
    % int.visualizeellipses("ellipseType", "resolution");
    
    targets = target( ...
        'position', [-120; 50; 0], ... straddle loss
        ...'position', [0; 1; 0], ... straddle loss
        ...'position', [-150; 550; 0], ... straddle loss
        ...'position', [500; 500; 0], ... on cell w/out straddle
        'position', [0; 600; 0], ... on cell w/out straddle
        'position', [0; d; 0], ... on cell w/out straddle
        ...'position', [-250; 750; 0], ... straddle loss
        'meanRCS_dbsm', 0 ...
        ...'meanRCS_dbsm', -4 ...
        );
        %%% sampling straddle loss is not known
    int = interface( ...
        'network', network, ...
        'targets', targets);
    int.configure( ...
        'noise', 1, ...
        'directPath', 0, ...
        "pathLoss", 1, ...
        "timeSynchronization", 1, ...
        "frequencySynchronization", 1, ...
        'spatialCoherency', 'incoherent', ...
        'swerling', 1);
    sp = spu( ...
        "interfaces", int, ...
        "gridResolution", [100 100 6000]);
    sp.setintegrationindices;
    sp.configure( ...
        "PFA", 1e-6, ...
        "processingAlgorithm", 6, ...
        "detectionAlgorithm", "thresholding", ...
        "detectionAlgorithm", "peak", ...
        "detectionAlgorithm", "OMPjoint", ... 
        "numberOfTargets", nan, ...
        "neighbourOffset", 1, ...
        "seed", 0, ...
        "seedShuffle", 0);

    prePFA = 0.3/Nrx; % to keep data rate constant
    sp.configure( ...
        "seed", 0, ...
        'prePFA', 1, ...
        'prePFA', prePFA, ...
        'numberOfNodesAdaptive', 1, ... true/false
        'numberOfStrongestNodes', 3, ...
        "numberOfTrials", 1, ...
        "numberOfTrialsParallel", 1000 ...
        );
    % sp.configuration.preThreshold
    sp.simulatedetection( ...
        "randomOnCell", 0, ...
        "numberOfTargets", 1);
    % close all;
    % sp.visualizeresolutionsimulation;
    
    dataRate(iterID) = sp.configuration.prePFA*Nrx;
    cost(iterID) = Nrx;
    PD(iterID) = sum(sp.resolutionSimulationReport.PD, 'all');
end

%%
figure; plot(cost, PD);
xlabel('# receivers'); ylabel('P_d');
grid off; grid on; grid minor;
title('P_d vs. number of receivers at constant data rate');


%%% SNR weighted? noise pdf degisir, threshold formulu degisir.
%%% bayesian fusion?