%%% AnÄ±l ARSLAN 2303980
clc; clear; % close all;
addpath(genpath([pwd '/library']));

d = 900;
numberOfTrialsParallel = 1000;
NRX = 2 : 2 : 20;
NRX = 14;
prePFAs = 0.4./NRX; % to keep data rate constant

parameterSet = struct( ...
    'definition', "", ...
    'numberOfNodesAdaptive', [], ...
    'numberOfStrongestNodes', [], ...
    'dataRate', [], ...
    'cost', [], ...
    'PD', [] ...
    );
parameterSet = repmat(parameterSet, 1, 4);

%%% all data will be fused
% non-coh threhsold is fixed
parameterSet(1).definition = "fullFusion";
parameterSet(1).numberOfNodesAdaptive = false;
parameterSet(1).numberOfStrongestNodes = 0;

%%% only data of nodes having pre-detection is fused
% non-coh threshold changes with number of nodes with successful pre-detection
parameterSet(2).definition = "partialFusion";
parameterSet(2).numberOfNodesAdaptive = true;
parameterSet(2).numberOfStrongestNodes = 0;

%%% only data of nodes having pre-detection is fused
% non-coh threshold changes with number of nodes with successful pre-detection
% at most K nodes with strongest power will be fused.

parameterSet(3).definition = "partialFusion-2";
parameterSet(3).numberOfNodesAdaptive = true;
parameterSet(3).numberOfStrongestNodes = 2;
parameterSet(4).definition = "partialFusion-3";
parameterSet(4).numberOfNodesAdaptive = true;
parameterSet(4).numberOfStrongestNodes = 3;
parameterSet(5).definition = "partialFusion-4";
parameterSet(5).numberOfNodesAdaptive = true;
parameterSet(5).numberOfStrongestNodes = 4;
parameterSet(6).definition = "partialFusion-5";
parameterSet(6).numberOfNodesAdaptive = true;
parameterSet(6).numberOfStrongestNodes = 5;

numParamSet = length(parameterSet);

targets = target( ...
    'position', [0; d; 0], ...
    'meanRCS_dbsm', -7 ...
    );

for paramSetID = 1 : numParamSet
    fprintf('Parameter set: %d/%d\n', paramSetID, numParamSet);

    numIter = length(NRX);
    parameterSet(paramSetID).dataRate = zeros(numIter, 1);
    parameterSet(paramSetID).cost = zeros(numIter, 1);
    parameterSet(paramSetID).PD = zeros(numIter, 1);

    for iterID = 1 : numIter
        fprintf('Iteration: %d/%d\n', iterID, numIter);
        Nrx = NRX(iterID);
        posTransmitter = [0; 2*d; 0];
        
        sectorLength = 360/Nrx;
        theta = linspace(0, 360 - sectorLength, Nrx) + 90;
        posReceivers = [d*cosd(theta); d - d*sind(theta); zeros(1, Nrx)];
        
        arrayRX = planarArray( ...
            "numberOfElements", [11 1], ...
            "numberOfElements", [1 1], ...
            "rpm", 0);
        arrayTX = planarArray( ...
            "numberOfElements", [5 1], ...
            "numberOfElements", [1 1], ...
            "rpm", 0);
        
        receivers = receivingNode( ...
            'position', posReceivers, ...
            'position', posReceivers, ...
            'array', arrayRX, ...
            'samplingFrequency', 2e6, ...
            'CPIsecond', 15e-6);
        
        transmitters = transmittingNode( ...
            'position', posTransmitter, ...
            'array', arrayTX, ...
            'inputPower_W', 1e3, ...
            'carrierFrequency', 1e9, ...
            'pulseWidth', 5e-7);
        transmitters.setLFM( ...
            "bandWidth", 1e6, ...
            "frequencyDirection", "decreasing");
        
        transmitterArrays = [transmitters.array];
        transmitterArrays.setscanparameters("backOfArrayRegion", 180);
        transmitterArrays.setorientation("yaw", -90);
        receiverArrays = [receivers.array];
        receiverArrays.setscanparameters("backOfArrayRegion", 90);
        receiverArrays.setorientation("yaw", mod(-theta, 360) - 180);
        
        network = radarNetwork( ...
            'receivingNodes', receivers, ...
            'transmittingNodes', transmitters);
        network.settingsnetwork( ...
            "networkMode", "multiStatic", ...
            'fractionalDelayMode', 'off', ...
            'fractionalDelayMode', 'sinc-based', ...
            "beamTime", 1e-2);
        network.activitycontrol( ...
            "transmittingNodeActivity", 1, ...
            "receivingNodeActivity", ones(1, Nrx));
        network.setsurveillance("staticBeam");
    
        int = interface( ...
            'network', network, ...
            'targets', targets);
        int.configure( ...
            'noise', 1, ...
            'directPath', 0, ...
            "pathLoss", 1, ...
            "timeSynchronization", 1, ...
            "frequencySynchronization", 1, ...
            'spatialCoherency', 'incoherent', ...
            'swerling', 1);

        % network.visualizenetwork; view(0, 90);
        % int.visualizeellipses("ellipseType", "target");
        % int.visualizeellipses("ellipseType", "resolution");

        sp = spu( ...
            "interfaces", int, ...
            "gridResolution", [75 75 6000]);
        sp.setintegrationindices;

        % Nrx = 13 - 14 indexing inceleme
        % switch iterID
        %     case 1
        %         idx = 1994;
        %     case 2
        %         idx = 1993;
        % end
        % y = sp.gridPointsMesh.y(~sp.blindZone);
        % y(idx)
        % x = sp.gridPointsMesh.x(~sp.blindZone);
        % x(idx)
        % 
        % figure(1999); hold on; plot(x, y, '.');
        % sp.integrationIndices(1, :, idx)
        % hypothesizedTimeDelays = sp.hypothesizedInterface.timeDelay(:, :, ~sp.blindZone); % (Ntx x Nrx x Ni matrix)
        % hypothesizedTimeDelays(1, :, idx)
    
        sp.configure( ...
            "seed", 0, ...
            "seedShuffle", 0, ...
            "PFA", 1e-6, ...
            'prePFA', 1, ...
            'prePFA', prePFAs(iterID), ...
            "processingAlgorithm", 6, ...
            "detectionAlgorithm", "thresholding", ...
            "detectionAlgorithm", "peak", ...
            "detectionAlgorithm", "OMPjoint", ... 
            "numberOfTargets", nan, ...
            "neighbourOffset", 1, ...
            'numberOfNodesAdaptive', parameterSet(paramSetID).numberOfNodesAdaptive, ...
            'numberOfStrongestNodes', parameterSet(paramSetID).numberOfStrongestNodes, ...
            "numberOfTrials", 1, ...
            "numberOfTrialsParallel", numberOfTrialsParallel ...
            );

        sp.simulatedetection( ...
            "randomOnCell", 0, ...
            "numberOfTargets", 1);
    
        %%% visualization
        sp.visualizeresolutionsimulation;
        
        if parameterSet(paramSetID).numberOfNodesAdaptive
            parameterSet(paramSetID).dataRate(iterID) = sp.configuration.prePFA*Nrx;
        else
            parameterSet(paramSetID).dataRate(iterID) = Nrx;
        end
        parameterSet(paramSetID).cost(iterID) = Nrx;
        parameterSet(paramSetID).PD(iterID) = sum(sp.resolutionSimulationReport.PD, 'all');

        % save('parameterSet.mat', 'parameterSet');
    end
end

%% Sonuclar, gorsellestirme

load('parameterSet.mat', 'parameterSet');
figure; hold on;
for paramSetID = 1 : numParamSet
    plot(parameterSet(paramSetID).cost, parameterSet(paramSetID).PD);
end
xlabel('# receivers'); ylabel('P_d');
grid off; grid on; grid minor;
title('P_d vs. number of receivers at constant data rate');
xlim([min([parameterSet.cost], [], 'all') max([parameterSet.cost], [], 'all')]); ylim([0 1]);
legend([parameterSet.definition], 'Location', 'best');


%%% SNR weighted? noise pdf degisir, threshold formulu degisir.
%%% bayesian fusion?