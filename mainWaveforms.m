%%% AnÄ±l ARSLAN 2303980
clc; %clear; close all;
addpath(genpath([pwd '/library']));
set(groot, "defaultFigurePosition", [680 458 560 420]);

arrayRX = uniformPlanarArray( ...
    "numberOfElements", [1 20], ...
    "rpm", 0);
arrayTX = uniformPlanarArray( ...
    "numberOfElements", [1 20], ...
    "rpm", 0);

receivers = receivingNode( ...
    'position', [-physconst('LightSpeed')*3e-5; -5e3; 0], ...
    'CPIsecond', 0.25*1e-3, ...
    'samplingFrequency', 1e6, ...
    'array', arrayRX);

transmitters = transmittingNode( ...
    'position', [physconst('LightSpeed')*3e-5; -5e3; 0], ...
    'array', arrayTX, ...
    'peakPower_W', 40e3, ...
    'carrierFrequency', 1e9, ...
    'pulseWidth', 10e-6);
transmitters.setLFM( ...
    "bandWidth", 1e6, ...
    "frequencyDirection", "symmetric", ...
    "frequencyOffset", 0);

transmitters.array.setscanparameters("backOfArray", true);
receivers.array.setscanparameters("backOfArray", true);

network = radarNetwork( ...
    'receivingNodes', receivers, ...
    'transmittingNodes', transmitters);
% transmitters.settaper("taperTypeFastTime", "rectwin");
% transmitters.visualizewaveform( ...
%     "domain", "time", ...
%     "plot", "real");
% transmitters.visualizewaveform( ...
%     "domain", "frequency", ...
%     "plot", "magnitude");
% network.visualizewaveformsampled( ...
%     "domain", "ambiguity", ...
%     "axisAmbiguity", "3D");
% network.visualizewaveformsampled( ...
%     "domain", "frequency", ...
%     "plot", "magnitude");

targets = target( ...
    'position', [-physconst('LightSpeed')*6e-5; -5e3; 0], ...
    'meanRCS_dbsm', 10*log10(5));
int = interface( ...
    'network', network, ...
    'targets', targets);
fc = fusionCenter( ...
    "interfaces", int, ...
    "gridResolution", [150 150 inf]);

%%% Configuration %%%

int.configure( ...
    'noise', 1, ...
    'directPath', 0, ...
    "pathLoss", 1, ...
    'fractionalDelay', 'off', ...
    "timeSynchronization", 1, ...
    "frequencySynchronization", 1, ...
    'swerling', 0);
rng(0);
int.visualizebeamformedsignals; % draws different trial all the time
ylim([-25 25]);

figureName = 'rx_without_straddle';
savefig(gcf, ['C:\GitRepo\MSRS\figuresSim\' figureName '.fig']);
saveas(gcf, ['C:\GitRepo\MSRS\figuresSim\' figureName '.eps'], 'epsc');

mf = network.matchFilter;
nonIntDelay = linspace(-0.5, 0.5, 1001).';
sig = transmitters.waveform((1 - network.pulseWidthSample : 0)*receivers.samplingPeriod + nonIntDelay.*receivers.samplingPeriod, receivers.samplingPeriod);
y = sig*conj(mf);
figure; plot(nonIntDelay, 20*log10(abs(y)));
grid off; grid on; grid minor;
ylabel('Straddle Loss (dB)'); xlabel('Non integer delay');
figureName = 'autocorr_straddle';
savefig(gcf, ['C:\GitRepo\MSRS\figuresSim\' figureName '.fig']);
saveas(gcf, ['C:\GitRepo\MSRS\figuresSim\' figureName '.eps'], 'epsc');


fc.setdictionary;
rng(0);
fc.applyspatialprocessing("saveSpectrum", 1, "doesPrint", true);
fc.visualizefilteredsignals; % draws saved data
ylim([-25 25]);

figureName = 'matched_filtered_without_straddle';
savefig(gcf, ['C:\GitRepo\MSRS\figuresSim\' figureName '.fig']);
saveas(gcf, ['C:\GitRepo\MSRS\figuresSim\' figureName '.eps'], 'epsc');

fig = fc.visualizeintegratedsignals( ...
    "plotMode", "image");
zlim([-25 25]); clim([-25 25]);
xlim([-20 20]); ylim([-20 20]);
figureName = 'matched_filtered_without_straddle_mapped';
savefig(fig, ['C:\GitRepo\MSRS\figuresSim\' figureName '.fig']);
saveas(fig, ['C:\GitRepo\MSRS\figuresSim\' figureName '.eps'], 'epsc');