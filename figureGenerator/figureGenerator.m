% AnÄ±l Arslan 2303980
kayit = 0;
%% Binary combining
clc; clear; close all;
set(groot, "defaultFigurePosition", [680 458 560 420]);
dtc = detector( ...
    "globalPFA", 1e-6, ...
    "numberOfSensors", [1 2 3 5 7 9 11], ...
    "SNR_input_dB", 8, ...
    "localPFA", logspace(0, -6, 31) ...
    );
dtc.setalgorithm( ...
    "binaryDetectionRule", "notSpecified", ...
    "binaryDetectionConstraint", "fixedGlobal|LocalPFA", ...
    "signalAmplitudeModel", "decorrelatedExponential", ...
    "signalPhaseModel", "decorrelatedUniform", ...
    "globalFusionRule", "BC" ...
    );
fig = dtc.visualize( ...
    "x_axis", "localPFA", ...
    "y_axis", "globalPD", "dataType", "analytical");

if kayit
    figureName = 'binary_combining';
    savefig(fig, ['C:\GitRepo\MSRS\figureGenerator\figures\' figureName '.fig']);
    saveas(fig, ['C:\GitRepo\MSRS\figureGenerator\figures\' figureName '.eps'], 'epsc');
end

%% Square Law Combining
clc; clear; close all;
set(groot, "defaultFigurePosition", [680 458 560 420]);
dtc = detector( ...
    "globalPFA", 1e-6, ...
    "numberOfSensors", [1 2 3 5 7 9 11], ...
    "SNR_input_dB", 8, ...
    "localPFA", logspace(0, -6, 31) ...
    );
dtc.setalgorithm( ...
    "signalAmplitudeModel", "decorrelatedExponential", ...
    "signalPhaseModel", "decorrelatedUniform", ...
    "globalFusionRule", "SLC" ...
    );
fig = dtc.visualize( ...
    "x_axis", "localPFA", ...
    "y_axis", "globalPD", "dataType", "analytical");

if kayit
    figureName = 'square_law_combining';
    savefig(fig, ['C:\GitRepo\MSRS\figureGenerator\figures\' figureName '.fig']);
    saveas(fig, ['C:\GitRepo\MSRS\figureGenerator\figures\' figureName '.eps'], 'epsc');
end

%% Equal SNR
clc; clear; close all;
set(groot, "defaultFigurePosition", [680 458 560 420]);

pfaLocal = logspace(0, -6, 31);
algorithms = ["BC", "SLC"];

fig = figure;
for algorithm = algorithms
    dtc = detector( ...
        "globalPFA", 1e-6, ...
        "numberOfSensors", 7, ...
        "SNR_input_dB", 8, ...
        "localPFA", pfaLocal ...
        );
    dtc.setalgorithm( ...
        "binaryDetectionRule", "notSpecified", ...
        "binaryDetectionConstraint", "fixedGlobal|LocalPFA", ...
        "signalAmplitudeModel", "decorrelatedExponential", ...
        "signalPhaseModel", "decorrelatedUniform", ...
        "globalFusionRule", algorithm ...
        );
    pd = squeeze(dtc.globalPD);
    semilogx(pfaLocal, pd, 'LineWidth', 2); hold on;
end
grid on; grid minor;
ylim([0, 1]);
xlabel('Local Probability of False Alarm');
ylabel('Global Probability of Detection');
algorithms(algorithms == "WSLCbiased") = "WSLC";
legend(algorithms, 'Location', 'best');

if kayit
    figureName = 'equal_snr';
    savefig(fig, ['C:\GitRepo\MSRS\figureGenerator\figures\' figureName '.fig']);
    saveas(fig, ['C:\GitRepo\MSRS\figureGenerator\figures\' figureName '.eps'], 'epsc');
end

%% Different SNR
clc; clear; close all;
set(groot, "defaultFigurePosition", [680 458 560 420]);

pfaLocal = logspace(0, -6, 31);
algorithms = ["BC", "SLC", "WSLCbiased"];

fig = figure;
for algorithm = algorithms
    dtc = detector( ...
        "globalPFA", 1e-6, ...
        "numberOfSensors", 7, ...
        "SNR_input_dB", 8, ...
        "localPFA", pfaLocal ...
        );
    dtc.setalgorithm( ...
        "binaryDetectionRule", "notSpecified", ...
        "binaryDetectionConstraint", "fixedGlobal|LocalPFA", ...
        "signalAmplitudeModel", "decorrelatedExponential", ...
        "signalPhaseModel", "decorrelatedUniform", ...
        "globalFusionRule", algorithm ...
        );
    rng(1975); dtc.randomSNRwithFixedAverage("rangeSNR_dB", 20);
    snr = dtc.SNR_input_dB{1};
    pd = squeeze(dtc.globalPD);
    semilogx(pfaLocal, pd, 'LineWidth', 2); hold on;
end
grid on; grid minor;
ylim([0, 1]);
xlabel('Local Probability of False Alarm');
ylabel('Global Probability of Detection');
algorithms(algorithms == "WSLCbiased") = "WSLC";
legend(algorithms, 'Location', 'best');

if kayit
    figureName = 'different_snr';
    savefig(fig, ['C:\GitRepo\MSRS\figureGenerator\figures\' figureName '.fig']);
    saveas(fig, ['C:\GitRepo\MSRS\figureGenerator\figures\' figureName '.eps'], 'epsc');
end