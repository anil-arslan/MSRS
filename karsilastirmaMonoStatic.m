%%% AnÄ±l ARSLAN 2303980
clc; clear; % close all;
addpath(genpath([pwd '/library']));

d = 1e3;
posMonostatic = [0; 0; 0];
posMultiMonostatic = [posMonostatic, [d; 0; 0]];

arrayRX = uniformPlanarArray( ...
    "numberOfElements", [5 1], ...
    "rpm", 0);
arrayTX = uniformPlanarArray( ...
    "numberOfElements", [1 1], ...
    "rpm", 0);

receivers = receivingNode( ...
    'position', posMultiMonostatic, ...
    'array', arrayRX, ...
    'samplingFrequency', 2e6, ... 5e6, ... 2e7
    'CPIsecond', 10e-6); % 15e-6
receivers.settingsreceiver("beamformingMode", "bypass");
% receivers.setbeamcenters("beamCentersAzimuth", -5 : 5 : 5);

transmitters = transmittingNode( ...
    'position', posMultiMonostatic, ...
    'array', arrayTX, ...
    'inputPower_W', 1e3, ...
    'carrierFrequency', 1e9, ...
    'pulseWidth', 5e-7); % 1e-6
transmitters.setLFM( ...
    "bandWidth", 1e6, ... 5e6
    "frequencyDirection", "decreasing");

transmitterArrays = [transmitters.array];
receiverArrays = [receivers.array];

transmitterArrays.setorientation("yaw", 90);
receiverArrays.setorientation("yaw", 90);
% transmitterArrays.steer("steeringAzimuth", 30);
receiverArrays.setscanparameters("backOfArrayRegion", 180);
transmitterArrays.setscanparameters("backOfArrayRegion", 180);

network = radarNetwork( ...
    'receivingNodes', receivers, ...
    'transmittingNodes', transmitters);
network.settingsnetwork( ...
    "networkMode", "monoStatic", ...
    'fractionalDelayMode', 'off', ...
    'fractionalDelayMode', 'sinc-based', ...
    "beamTime", 1e-2);
network.activitycontrol( ...
    "transmittingNodeActivity", [1 0], ...
    "receivingNodeActivity", [1 0]);
network.setsurveillance("staticBeam");
network.setsynchronization( ...
    "timeOffsetBistaticPairs", 0, ...
    "timeDeviationBistaticPairs", 5e-8, ... Ts/10
    "timeDeviationBistaticPairs", 5e-7, ... Ts
    "frequencyOffsetBistaticPairs", 0, ...
    "frequencyDeviationBistaticPairs", 0 ... 5e8
    );

targets = target( ...
    ...'position', [-120; 50; 0], ... straddle loss
    ...'position', [0; 1; 0], ... straddle loss
    ...'position', [-150; 550; 0], ... straddle loss
    ...'position', [500; 500; 0], ... on cell w/out straddle
    'position', [0; 600; 0], ... on cell w/out straddle
    'meanRCS_dbsm', 0, ...
    'velocity', [0; -0*d/2; 0]);
int = interface( ...
    'network', network, ...
    'targets', targets);
int.configure( ...
    'noise', 1, ...
    'directPath', 0, ...
    "pathLoss", 1, ...
    "timeSynchronization", 1, ...
    "frequencySynchronization", 1, ...
    'spatialCoherency', 'coherent', ...
    'swerling', 1);

fc = fusionCenter("interfaces", int, "gridResolution", [100 100 6000]);
fc.setintegrationindices;
fc.configuremonostatic( ...
    'CFAR', 1, ...
    'groupingCloseness', 3, ...
    'numberOfGuardCells', 1, ...
    'numberOfTrainingCells', 20, ...
    'interpolationMF', 0, ...
    'interpolationDF', 1, ...
    'removeBoundaryDetectionDF', 1, ...
    'removeBoundaryDetectionMF', 1);
fc.configure( ...
    "globalPFA", 1e-6, ...
    "globalFusionRule", "SLC", ...
    "detectionAlgorithm", "thresholding", ...
    "detectionAlgorithm", "peak", ...
    "detectionAlgorithm", "OMPjoint", ... 
    "seed", 0, ...
    "seedShuffle", 0, ...
    "numberOfTrials", 1, ...
    'numberOfTrialsParallel', 1, ...
    'numberOfTrialsParallel', 100);

int.visualizeellipses("ellipseType", "target");
int.visualizeellipses("ellipseType", "resolution");

%%
% arrayRX.visualizearray;
% network.visualizenetwork;
% int.visualizescenario("showPattern", 1);
% int.visualizereceivedsignals;
% int.visualizebeamformedsignals;
% fc.visualizefilteredsignals("trialID", 1);

trialID = 3;
figID = 50;
fc.configure("seed", 0);
fc.setmatchfilteredsignals;
fc.applyspatialprocessing( ...
    "saveSpectrum", 1);
fc.visualizeintegratedsignals( ...
    "figureID", figID + 2, ...
    "iterationID", 1 : 4, ...
    "trialID", trialID, ...
    "monoStaticNetworkRXID", 1, ...
    "monoStaticNetworkCHID", 1, ...
    "plotMode", "image");
fc.visualizecompression( ...
    "figureID", figID + 100, ...
    "trialID", trialID, ...
    "monoStaticNetworkRXID", 1, ...
    "monoStaticNetworkCHID", 1);
%%
% fc.setmatchfilteredsignals;
fc.visualizeintegratedsignals( ...
    "figureID", 5140, ...,
    "trialID", 3, ...
    "monoStaticNetworkRXID", 1, ...
    "monoStaticNetworkCHID", 1);
% fc.visualizeestimation;

%% resolution simulation

targets = target( ...
    ...'position', [-120; 50; 0], ... straddle loss
    ...'position', [0; 1; 0], ... straddle loss
    ...'position', [-150; 550; 0], ... straddle loss
    'position', [500; 500; 0], ... on cell w/out straddle
    ...'position', [0; 600; 0], ... on cell w/out straddle
    'meanRCS_dbsm', 0);
int.settargets(targets)
clc;
fc.configure( ...
    "seed", 0, ...
    "numberOfTrials", 1, ...
    "numberOfTrialsParallel", 1000);
fc.simulatedetection( ...
    "onCellCenters", 1);
close all;
fc.visualizeresolutionsimulation;

%% coverage simulation

clc;
fc.configure( ...
    "seed", 0, ...
    "neighbourOffset", 100, ...
    "numberOfTrials", 1, ...
    "numberOfTrialsParallel", 200);
fc.simulatecoverage( ...
    "meanRCS_dbsm", 10, ...
    "onCellCenters", 0);
close all;
fc.visualizecoveragesimulation( ...
    "contourLevelDetection", 0.85, ...
    "saveDirectory", "figures/monoStatic/centerOfCell/senkron", ...
    "saveDirectory", "figures/monoStatic/centerOfCell/asenkron", ...
    "saveDirectory", "figures/monoStatic/randomInCell/senkron", ...
    ..."saveDirectory", "figures/monoStatic/randomInCell/asenkron", ...
    "saveFigures", 1 ...
    );
%%
% fc.visualizereceiveroperatingcharacteristics;
% fc.visualizedetectioncharacteristics("PFA", 1e-4);
%%
% tic;
% detection = fc.startsimulation("duration", 0.5);
% toc
%%
% int.configure("swerling", 0);
% fc.visualizereceiveroperatingcharacteristics;
% fc.visualizedetectioncharacteristics("PFA", 1e-6);
% int.configure("swerling", 1);
% fc.visualizereceiveroperatingcharacteristics;
% fc.visualizedetectioncharacteristics("PFA", 1e-6);